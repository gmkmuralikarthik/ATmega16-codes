
GccApplication14.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004c8  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015c  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000039e  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015b  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRB=0;
  a6:	17 ba       	out	0x17, r1	; 23
   char led_1[4]={PA0,PA1,PA2,PA3};
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8a 83       	std	Y+2, r24	; 0x02
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8b 83       	std	Y+3, r24	; 0x03
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	8c 83       	std	Y+4, r24	; 0x04
	   char led_2[4]={PA4,PA5,PA6,PA7};
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	8d 83       	std	Y+5, r24	; 0x05
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	8e 83       	std	Y+6, r24	; 0x06
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	8f 83       	std	Y+7, r24	; 0x07
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	88 87       	std	Y+8, r24	; 0x08
	  int i=2,j=1;
	  led_1[i];
	  PORTB=0;
  c6:	18 ba       	out	0x18, r1	; 24
int main(void)
{
	DDRB=0;
   char led_1[4]={PA0,PA1,PA2,PA3};
	   char led_2[4]={PA4,PA5,PA6,PA7};
	  int i=2,j=1;
  c8:	ee 24       	eor	r14, r14
  ca:	ff 24       	eor	r15, r15
  cc:	e3 94       	inc	r14
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	70 e0       	ldi	r23, 0x00	; 0
	  led_1[i];
	  PORTB=0;
	
	 while(1)
	 {
		  DDRA=(1<<led_1[i])|(1<<led_2[j]);
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	e5 e0       	ldi	r30, 0x05	; 5
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ec 0f       	add	r30, r28
  dc:	fd 1f       	adc	r31, r29
  de:	ee 0d       	add	r30, r14
  e0:	ff 1d       	adc	r31, r15
  e2:	a9 01       	movw	r20, r18
  e4:	00 80       	ld	r0, Z
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x5a>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x56>
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	e6 0f       	add	r30, r22
  fa:	f7 1f       	adc	r31, r23
  fc:	c9 01       	movw	r24, r18
  fe:	00 80       	ld	r0, Z
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x74>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <main+0x70>
 10a:	84 2b       	or	r24, r20
 10c:	8a bb       	out	0x1a, r24	; 26
		 PORTA=(1<<led_1[i])|(0<<led_2[j]);
 10e:	c9 01       	movw	r24, r18
 110:	00 80       	ld	r0, Z
 112:	02 c0       	rjmp	.+4      	; 0x118 <main+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <main+0x82>
 11c:	8b bb       	out	0x1b, r24	; 27
		 
		 
		while(!(PINB & (1<<PINB0)))
 11e:	b0 99       	sbic	0x16, 0	; 22
 120:	34 c0       	rjmp	.+104    	; 0x18a <main+0xf8>


#include <avr/io.h>
#include <util/delay.h>
int main(void)
 122:	fb 01       	movw	r30, r22
 124:	31 96       	adiw	r30, 0x01	; 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8c 0f       	add	r24, r28
 12c:	9d 1f       	adc	r25, r29
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
		 PORTA=(1<<led_1[i])|(0<<led_2[j]);
		 
		 
		while(!(PINB & (1<<PINB0)))
		{
			DDRA=(1<<led_1[i])|(1<<led_2[j]);
 132:	05 e0       	ldi	r16, 0x05	; 5
 134:	10 e0       	ldi	r17, 0x00	; 0
 136:	0c 0f       	add	r16, r28
 138:	1d 1f       	adc	r17, r29
 13a:	0e 0d       	add	r16, r14
 13c:	1f 1d       	adc	r17, r15
 13e:	a9 01       	movw	r20, r18
 140:	02 90       	ld	r0, -Z
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <main+0xb2>
 14c:	c9 01       	movw	r24, r18
 14e:	d8 01       	movw	r26, r16
 150:	0c 90       	ld	r0, X
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0xc6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <main+0xc2>
 15c:	84 2b       	or	r24, r20
 15e:	8a bb       	out	0x1a, r24	; 26
			PORTA=(1<<led_1[i])|(0<<led_2[j]);
 160:	c9 01       	movw	r24, r18
 162:	00 80       	ld	r0, Z
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <main+0xd4>
 16e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	96 e8       	ldi	r25, 0x86	; 134
 174:	a1 e0       	ldi	r26, 0x01	; 1
 176:	81 50       	subi	r24, 0x01	; 1
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	a0 40       	sbci	r26, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0xe4>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0xee>
 180:	00 00       	nop
			_delay_ms(500);
			
		
		i-=1;	
 182:	61 50       	subi	r22, 0x01	; 1
 184:	70 40       	sbci	r23, 0x00	; 0
	 {
		  DDRA=(1<<led_1[i])|(1<<led_2[j]);
		 PORTA=(1<<led_1[i])|(0<<led_2[j]);
		 
		 
		while(!(PINB & (1<<PINB0)))
 186:	b0 9b       	sbis	0x16, 0	; 22
 188:	da cf       	rjmp	.-76     	; 0x13e <main+0xac>
			_delay_ms(500);
			
		
		i-=1;	
		}
		while(!(PINB & (1<<PINB1)))
 18a:	b1 99       	sbic	0x16, 1	; 22
 18c:	35 c0       	rjmp	.+106    	; 0x1f8 <main+0x166>


#include <avr/io.h>
#include <util/delay.h>
int main(void)
 18e:	f7 01       	movw	r30, r14
 190:	31 96       	adiw	r30, 0x01	; 1
 192:	a5 e0       	ldi	r26, 0x05	; 5
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ac 0f       	add	r26, r28
 198:	bd 1f       	adc	r27, r29
 19a:	ea 0f       	add	r30, r26
 19c:	fb 1f       	adc	r31, r27
		
		i-=1;	
		}
		while(!(PINB & (1<<PINB1)))
		{
			DDRA=(1<<led_1[i])|(1<<led_2[j]);
 19e:	01 e0       	ldi	r16, 0x01	; 1
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	0c 0f       	add	r16, r28
 1a4:	1d 1f       	adc	r17, r29
 1a6:	06 0f       	add	r16, r22
 1a8:	17 1f       	adc	r17, r23
 1aa:	a9 01       	movw	r20, r18
 1ac:	02 90       	ld	r0, -Z
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x122>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <main+0x11e>
 1b8:	c9 01       	movw	r24, r18
 1ba:	d8 01       	movw	r26, r16
 1bc:	0c 90       	ld	r0, X
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0x132>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <main+0x12e>
 1c8:	84 2b       	or	r24, r20
 1ca:	8a bb       	out	0x1a, r24	; 26
			PORTA=(1<<led_1[i])|(0<<led_2[j]);
 1cc:	c9 01       	movw	r24, r18
 1ce:	0c 90       	ld	r0, X
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <main+0x144>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <main+0x140>
 1da:	8b bb       	out	0x1b, r24	; 27
 1dc:	8f e9       	ldi	r24, 0x9F	; 159
 1de:	96 e8       	ldi	r25, 0x86	; 134
 1e0:	a1 e0       	ldi	r26, 0x01	; 1
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	a0 40       	sbci	r26, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x150>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x15a>
 1ec:	00 00       	nop
			_delay_ms(500);
			
			j-=1;
 1ee:	08 94       	sec
 1f0:	e1 08       	sbc	r14, r1
 1f2:	f1 08       	sbc	r15, r1
			_delay_ms(500);
			
		
		i-=1;	
		}
		while(!(PINB & (1<<PINB1)))
 1f4:	b1 9b       	sbis	0x16, 1	; 22
 1f6:	d9 cf       	rjmp	.-78     	; 0x1aa <main+0x118>
			
			j-=1;
			
		}

		while(!(PINB & (1<<PINB2)))
 1f8:	b2 99       	sbic	0x16, 2	; 22
 1fa:	34 c0       	rjmp	.+104    	; 0x264 <main+0x1d2>


#include <avr/io.h>
#include <util/delay.h>
int main(void)
 1fc:	e1 e0       	ldi	r30, 0x01	; 1
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 0f       	add	r30, r28
 202:	fd 1f       	adc	r31, r29
 204:	e6 0f       	add	r30, r22
 206:	f7 1f       	adc	r31, r23
			
		}

		while(!(PINB & (1<<PINB2)))
		{
			DDRA=(1<<led_1[i])|(1<<led_2[j]);
 208:	05 e0       	ldi	r16, 0x05	; 5
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	0c 0f       	add	r16, r28
 20e:	1d 1f       	adc	r17, r29
 210:	0e 0d       	add	r16, r14
 212:	1f 1d       	adc	r17, r15


#include <avr/io.h>
#include <util/delay.h>
int main(void)
 214:	6f 01       	movw	r12, r30
			
		}

		while(!(PINB & (1<<PINB2)))
		{
			DDRA=(1<<led_1[i])|(1<<led_2[j]);
 216:	a9 01       	movw	r20, r18
 218:	01 90       	ld	r0, Z+
 21a:	02 c0       	rjmp	.+4      	; 0x220 <main+0x18e>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <main+0x18a>
 224:	c9 01       	movw	r24, r18
 226:	d8 01       	movw	r26, r16
 228:	0c 90       	ld	r0, X
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x19e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <main+0x19a>
 234:	84 2b       	or	r24, r20
 236:	8a bb       	out	0x1a, r24	; 26
			PORTA=(1<<led_1[i])|(0<<led_2[j]);
 238:	c9 01       	movw	r24, r18
 23a:	d6 01       	movw	r26, r12
 23c:	0c 90       	ld	r0, X
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x1b2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <main+0x1ae>
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	8f e9       	ldi	r24, 0x9F	; 159
 24c:	96 e8       	ldi	r25, 0x86	; 134
 24e:	a1 e0       	ldi	r26, 0x01	; 1
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x1be>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x1c8>
 25a:	00 00       	nop
			_delay_ms(500);
			
			i+=1;
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
			
			j-=1;
			
		}

		while(!(PINB & (1<<PINB2)))
 260:	b2 9b       	sbis	0x16, 2	; 22
 262:	d8 cf       	rjmp	.-80     	; 0x214 <main+0x182>
			_delay_ms(500);
			
			i+=1;
			
		}
		while(!(PINB & (1<<PINB3)))
 264:	b3 99       	sbic	0x16, 3	; 22
 266:	37 cf       	rjmp	.-402    	; 0xd6 <main+0x44>


#include <avr/io.h>
#include <util/delay.h>
int main(void)
 268:	c7 01       	movw	r24, r14
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	e5 e0       	ldi	r30, 0x05	; 5
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	e8 0f       	add	r30, r24
 276:	f9 1f       	adc	r31, r25
			
		}
		while(!(PINB & (1<<PINB3)))
		{
		
			DDRA=(1<<led_1[i])|(1<<led_2[j]);
 278:	01 e0       	ldi	r16, 0x01	; 1
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	0c 0f       	add	r16, r28
 27e:	1d 1f       	adc	r17, r29
 280:	06 0f       	add	r16, r22
 282:	17 1f       	adc	r17, r23
 284:	a9 01       	movw	r20, r18
 286:	02 90       	ld	r0, -Z
 288:	02 c0       	rjmp	.+4      	; 0x28e <main+0x1fc>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <main+0x1f8>
 292:	c9 01       	movw	r24, r18
 294:	d8 01       	movw	r26, r16
 296:	0c 90       	ld	r0, X
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0x20c>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	0a 94       	dec	r0
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <main+0x208>
 2a2:	84 2b       	or	r24, r20
 2a4:	8a bb       	out	0x1a, r24	; 26
			PORTA=(1<<led_1[i])|(0<<led_2[j]);
 2a6:	c9 01       	movw	r24, r18
 2a8:	0c 90       	ld	r0, X
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <main+0x21e>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <main+0x21a>
 2b4:	8b bb       	out	0x1b, r24	; 27
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	96 e8       	ldi	r25, 0x86	; 134
 2ba:	a1 e0       	ldi	r26, 0x01	; 1
 2bc:	81 50       	subi	r24, 0x01	; 1
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	a0 40       	sbci	r26, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x22a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x234>
 2c6:	00 00       	nop
			_delay_ms(500);
			
			j-=1;
 2c8:	08 94       	sec
 2ca:	e1 08       	sbc	r14, r1
 2cc:	f1 08       	sbc	r15, r1
			_delay_ms(500);
			
			i+=1;
			
		}
		while(!(PINB & (1<<PINB3)))
 2ce:	b3 99       	sbic	0x16, 3	; 22
 2d0:	02 cf       	rjmp	.-508    	; 0xd6 <main+0x44>
 2d2:	d8 cf       	rjmp	.-80     	; 0x284 <main+0x1f2>

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>

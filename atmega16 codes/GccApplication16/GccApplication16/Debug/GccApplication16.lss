
GccApplication16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000413  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011e  00000000  00000000  00000d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034c  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000120  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000063  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  8a:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util//delay.h>
ISR(SPI_STC_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27


PORTA|=(1<<PA1);
  a4:	d9 9a       	sbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e3       	ldi	r24, 0x3F	; 63
  a8:	9d e0       	ldi	r25, 0x0D	; 13
  aa:	a3 e0       	ldi	r26, 0x03	; 3
  ac:	81 50       	subi	r24, 0x01	; 1
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	a0 40       	sbci	r26, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_10+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_10+0x24>
  b6:	00 00       	nop
_delay_ms(1000);
PORTA=0;	
  b8:	1b ba       	out	0x1b, r1	; 27

}
  ba:	bf 91       	pop	r27
  bc:	af 91       	pop	r26
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:
int main(void)
{
DDRA|=(1<<PA0)|(1<<PA1);
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	8a bb       	out	0x1a, r24	; 26
DDRB=(1<<PB5);
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	87 bb       	out	0x17, r24	; 23
    while(1)
    {

		SPCR=0b11000000;
  d6:	90 ec       	ldi	r25, 0xC0	; 192
      
		while(!(SPSR &(1<<SPIF)));
		sei();
if (SPDR==0b11111111)
{
	PORTA=(1<<PA1);
  d8:	22 e0       	ldi	r18, 0x02	; 2
DDRA|=(1<<PA0)|(1<<PA1);
DDRB=(1<<PB5);
    while(1)
    {

		SPCR=0b11000000;
  da:	9d b9       	out	0x0d, r25	; 13
      
		while(!(SPSR &(1<<SPIF)));
  dc:	77 9b       	sbis	0x0e, 7	; 14
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x10>
		sei();
  e0:	78 94       	sei
if (SPDR==0b11111111)
  e2:	8f b1       	in	r24, 0x0f	; 15
  e4:	8f 3f       	cpi	r24, 0xFF	; 255
  e6:	c9 f7       	brne	.-14     	; 0xda <main+0xe>
{
	PORTA=(1<<PA1);
  e8:	2b bb       	out	0x1b, r18	; 27
  ea:	4f e3       	ldi	r20, 0x3F	; 63
  ec:	5d e0       	ldi	r21, 0x0D	; 13
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	41 50       	subi	r20, 0x01	; 1
  f2:	50 40       	sbci	r21, 0x00	; 0
  f4:	60 40       	sbci	r22, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x24>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x2e>
  fa:	00 00       	nop
	_delay_ms(1000);
	PORTA=0;
  fc:	1b ba       	out	0x1b, r1	; 27
  fe:	ed cf       	rjmp	.-38     	; 0xda <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
